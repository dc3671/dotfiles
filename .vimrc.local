


"------------------------------------------------
" display/navigate settings
"------------------------------------------------

" Vim colorscheme
colorscheme molokai
let g:airline_theme = 'zenburn'

" Do not wrap long lines
set wrap

" no Highlight
noremap <silent><leader>/ :nohls<CR>

" no spell highlight
set nospell

" set foldmethod
set foldmethod=indent

" for transparent probelm with konsole
hi Normal  ctermfg=252 ctermbg=none

" Smart way to move between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" Use 'm/M' to move among buffers
noremap m :bn<CR>
noremap M :bp<CR>

" toggle between two buffers
nnoremap t <C-^>

" Quick move in insert mode
inoremap <C-o> <Esc>o
inoremap <C-a> <Home>
inoremap <C-e> <End>

" Go to home and end using capitalized directions
noremap H 0
noremap L $
noremap Y y$


"------------------------------------------------
" edit settings
"------------------------------------------------

" select all
noremap <Leader>sa ggVG

" save without Permission
cmap w!! %!sudo tee > /dev/null %

" no backups "
set nobackup
set nowritebackup

" for tmux to automatically set paste and nopaste mode at the time pasting (as
" happens in VIM UI)
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" set JS/HTML tab width
" autocmd FileType javascript,html,css setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

"------------------------------------------------
" plugin specific settings
"------------------------------------------------

" JS syntax config

let g:used_javascript_libs = 'jquery,angularjs,underscore,backbone'

" Syntastic config

" show list of errors and warnings on the current file
nmap <leader>e :Errors<CR>

" turn to next or previous errors, after open errors list
nmap <leader>n :lnext<CR>
nmap <leader>p :lprevious<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = 'EE'
let g:syntastic_warning_symbol = 'WW'
"let g:syntastic_style_error_symbol = '✗'
"let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_loc_list_height=5

let g:syntastic_javascript_checkers = ['eslint']

" YouCompleteMe

let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_complete_in_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_key_list_select_completion = ['<Tab>', '<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_semantic_triggers =  {
    \ 'c' : ['->', '.'],
    \ 'objc' : ['->', '.'],
    \ 'ocaml' : ['.', '#'],
    \ 'cpp,objcpp' : ['->', '.', '::'],
    \ 'perl' : ['->'],
    \ 'php' : ['->', '::', '(', 'use ', 'namespace ', '\'],
    \ 'cs,java,typescript,d,python,perl6,scala,vb,elixir,go' : ['.', 're!(?=[a-zA-Z]{3,4})'],
    \ 'html': ['<', '"', '</', ' '],
    \ 'vim' : ['re![_a-za-z]+[_\w]*\.'],
    \ 'ruby' : ['.', '::'],
    \ 'lua' : ['.', ':'],
    \ 'erlang' : [':'],
    \ 'haskell' : ['.', 're!.'],
    \ 'scss,css': [ 're!^\s{2,4}', 're!:\s+' ],
    \ 'javascript': ['.', 're!(?=[a-zA-Z]{3,4})'],
    \ 'tagbar' : 1,
    \ 'qf' : 1,
    \ 'notes' : 1,
    \ 'markdown' : 1,
    \ 'unite' : 1,
    \ 'text' : 1,
    \ 'vimwiki' : 1,
    \ 'gitcommit' : 1,
\}

let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
autocmd FileType javascript setlocal omnifunc=tern#Complete

" ctrlsf: grep search
vmap <Leader>s <Plug>CtrlSFVwordExec

" vim-fuzzysearch
nnoremap <leader><leader>/ :FuzzySearch<cr>

" vim-easymotion
map <space> <Plug>(easymotion-s2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1

" vim-autoformat
"require: npm install -g js-beautify
autocmd FileType javascript,json,html,css,scss noremap <buffer>  <leader><leader>f :Autoformat<cr>

" vim-bbye
nnoremap qq :Bdelete<cr>

" BufOnly.vim
nnoremap <silent> qo :BufOnly<CR>

" vim-trailing-whitespace
map <leader><space> :FixWhitespace<cr>

" Indent guide line
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#1f1f1f ctermbg=0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2f2f2f ctermbg=1
hi IndentGuidesOdd guibg=#1f1f1f ctermbg=grey
hi IndentGuidesEven guibg=#2f2f2f ctermbg=darkgrey

" Multiple Cursors
"let g:multi_cursor_next_key='<C-n>'
"let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-l>'


"set cursorline
"hi CursorLine cterm=NONE ctermbg=lightyellow
"hi CursorColumn cterm=NONE ctermbg=lightyellow
"nnoremap c :set cursorline! cursorcolumn!

"------------------------------------------------
" Get rid of unnecessary plugins "
"------------------------------------------------

" interpret a file by function and cache file automatically
"UnBundle 'MarcWeber/vim-addon-mw-utils'

" Some utility functions for VIM http://www.vim.org/scripts/script.php?script_id=1863
"UnBundle 'tomtom/tlib_vim'

" A tree explorer plugin for vim
"UnBundle 'scrooloose/nerdtree'

" precision colorscheme for the vim text editor
"UnBundle 'altercation/vim-colors-solarized'

" Collection of color schemes for VIM
"UnBundle 'spf13/vim-colors'

" quoting/parenthesizing made simple
"UnBundle 'tpope/vim-surround'

" enable repeating supported plugin maps with "."
"UnBundle 'tpope/vim-repeat'

" Inserts matching bracket, paren, brace or quote http://www.vim.org/scripts/script.php?script_id=1849
"UnBundle 'spf13/vim-autoclose'

" Fuzzy file, buffer, mru, tag, etc finder
"UnBundle 'kien/ctrlp.vim'

" Navigate and jump to function defs http://www.vim.org/scripts/script.php?script_id=4592
"UnBundle 'tacahiroy/ctrlp-funky'

" True Sublime Text style multiple selections for Vim
"UnBundle 'terryma/vim-multiple-cursors'

" Vim session manager http://www.vim.org/scripts/script.php?script_id=2010
UnBundle 'vim-scripts/sessionman.vim'

" extended % matching for HTML, LaTeX, and many other languages http://www.vim.org/scripts/script.php?script_id=39
"UnBundle 'matchit.zip'

" lean & mean status/tabline for vim that's light as air
"UnBundle 'bling/vim-airline'

" super simple vim plugin to show the list of buffers in the command bar
"UnBundle 'bling/vim-bufferline'

" Vim motions on speed! http://www.vim.org/scripts/script.php?script_id=3526
"UnBundle 'Lokaltog/vim-easymotion'

" NERDTree and tabs together in Vim, painlessly
"UnBundle 'jistr/vim-nerdtree-tabs'

" one colorscheme pack to rule them all
"UnBundle 'flazz/vim-colorschemes'

" Display your undo history in a graph. http://www.vim.org/scripts/script.php?script_id=4177
UnBundle 'mbbill/undotree'

" A Vim plugin for visually displaying indent levels in code
"UnBundle 'nathanaelkane/vim-indent-guides'

" A plugin for automatically restoring file's cursor position and folding http://www.vim.org/scripts/script.php?script_id=4021
"UnBundle 'vim-scripts/restore_view.vim'

" Show a VCS diff using Vim's sign column
"UnBundle 'mhinz/vim-signify'

" easily search for, substitute, and abbreviate multiple variants of a word
"UnBundle 'tpope/vim-abolish.git'

" :substitute preview
"UnBundle 'osyo-manga/vim-over'

" Create your own text objects http://www.vim.org/scripts/script.php?script_id=2100
"UnBundle 'kana/vim-textobj-user'

" provide text objects to select a block of lines which are similarly indented to the current line
"UnBundle 'kana/vim-textobj-indent'

" Smart selection of the closest text object
"UnBundle 'gcmt/wildfire.vim'

" Lightweight auto-correction for Vim
"UnBundle 'reedes/vim-litecorrect'

" Improving on Vim's native sentence text object and motion
"UnBundle 'reedes/vim-textobj-sentence'

" Use â€ ̃curlyâ€TM quote characters in Vim
"UnBundle 'reedes/vim-textobj-quote'

" Uncover usage problems in your writing
"UnBundle 'reedes/vim-wordy'

" Syntax checking hacks for vim
"UnBundle 'scrooloose/syntastic'

" a Git wrapper so awesome, it should be illegal http://www.vim.org/scripts/script.php?script_id=2975
"UnBundle 'tpope/vim-fugitive'

" An Interface to WEB APIs
"UnBundle 'mattn/webapi-vim'

" vimscript for creating gists
"UnBundle 'mattn/gist-vim'

" Vim plugin for intensely orgasmic commenting
"UnBundle 'scrooloose/nerdcommenter'

" comment stuff out
"UnBundle 'tpope/vim-commentary'

" Vim script for text filtering and alignment
"UnBundle 'godlygeek/tabular'

" Ultimate auto-completion system for Vim
UnBundle 'Shougo/neocomplcache'

" neo-snippet plugin contains neocomplcache snippets source
UnBundle 'Shougo/neosnippet'

" The standard snippets repository for neosnippet
UnBundle 'Shougo/neosnippet-snippets'

" vim-snipmate default snippets
UnBundle 'honza/vim-snippets'

" PHP Integration environment for Vim
UnBundle 'spf13/PIV'

" vim plugin for inserting use statements automatically
UnBundle 'arnaud-lb/vim-php-namespace'

" Twig syntax highlighting, snipMate, etc. - twig php templates
UnBundle 'beyondwords/vim-twig'

" Vim python-mode. PyLint, Rope, Pydoc, breakpoints from box.
UnBundle 'klen/python-mode'

" A set of menus/shortcuts to work with Python files
"UnBundle 'yssource/python.vim'

" Extend the % motion and define g%, [%, and ]% motions for Python files
"UnBundle 'python_match.vim'

" This is the pythoncomplete omni-completion script shipped with vim 7
"UnBundle 'pythoncomplete'

" distinct highlighting of keywords vs values, JSON-specific (non-JS) warnings, quote concealing
"UnBundle 'elzr/vim-json'

" vim syntax for LESS (dynamic CSS)
"UnBundle 'groenewege/vim-less'

" Vastly improved Javascript indentation and syntax support in Vim
UnBundle 'pangloss/vim-javascript'

" highlighting and indenting JST/EJS syntax
"UnBundle 'briancollins/vim-jst'

" CoffeeScript support for vim
"UnBundle 'kchmck/vim-coffee-script'

" Automatically closes HTML tags once you finish typing them
UnBundle 'amirh/HTML-AutoCloseTag'

" Add CSS3 syntax support to vim's built-in
"UnBundle 'hail2u/vim-css3-syntax'

" css/less/sass/html color preview for vim
"UnBundle 'gorodinskiy/vim-coloresque'

" Vim runtime files for Haml, Sass, and SCSS
UnBundle 'tpope/vim-haml'

" Ruby on Rails power tools
"UnBundle 'tpope/vim-rails'

" Vim support for Rust file detection and syntax highlighting
"UnBundle 'wting/rust.vim'

" Vim Markdown runtime files
"UnBundle 'tpope/vim-markdown'

" Vim plugin for previewing markup files
"UnBundle 'spf13/vim-preview'

" Vim Cucumber runtime files Ruby acceptance testing framework Cucumber
"UnBundle 'tpope/vim-cucumber'

" Vim syntax for TOML
UnBundle 'cespare/vim-toml'

" Align pipes when you are editing Cucumber tables
"UnBundle 'quentindecock/vim-cucumber-align-pipes'

" Vim files for editing Salt files
UnBundle 'saltstack/salt-vim'

" END "
