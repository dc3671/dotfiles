" Environment {

  " Basics {
    set nocompatible    " Must be first line
    set background=dark   " Assume a dark background
  " }

  " Windows Compatible {
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier.
    if has('win32') || has('win64')
      set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

      " Be nice and check for multi_byte even if the config requires
      " multi_byte support most of the time
      if has("multi_byte")
      " Windows cmd.exe still uses cp850. If Windows ever moved to
      " Powershell as the primary terminal, this would be utf-8
      set termencoding=cp850
      " Let Vim use utf-8 internally, because many scripts require this
      set encoding=utf-8
      setglobal fileencoding=utf-8
      " Windows has traditionally used cp1252, so it's probably wise to
      " fallback into cp1252 instead of eg. iso-8859-15.
      " Newer Windows files might contain utf-8 or utf-16 LE so we might
      " want to try them first.
      set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
      endif
    endif
  " }

" }

" Bundles {

  filetype off
  call plug#begin('~/.vim/bundle')

  " Deps {
    "Plug 'gmarik/vundle'
    "Plug 'MarcWeber/vim-addon-mw-utils'
    "Plug 'tomtom/tlib_vim'
    "if executable('ag')
      "Plug 'mileszs/ack.vim'
      "let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    "elseif executable('ack-grep')
      "let g:ackprg="ack-grep -H --nocolor --nogroup --column"
      "Plug 'mileszs/ack.vim'
    "elseif executable('ack')
      "Plug 'mileszs/ack.vim'
    "endif
  " }

  " In your .vimrc.before.local file
  " list only the plugin groups you will use
  if !exists('g:spf13_bundle_groups')
    let g:spf13_bundle_groups=['general', 'writing', 'programming', 'python', 'javascript', 'html', 'misc', 'youcompleteme']
  endif

  " To override all the included bundles, add the following to your
  " .vimrc.bundles.local file:
  "   let g:override_spf13_bundles = 1
  if !exists("g:override_spf13_bundles")

  " General {
    if count(g:spf13_bundle_groups, 'general')
      Plug 'scrooloose/nerdtree'
      Plug 'spf13/vim-colors'
      Plug 'joshdick/onedark.vim'
      Plug 'tpope/vim-surround'
      Plug 'tpope/vim-repeat'
      Plug 'rhysd/conflict-marker.vim'
      Plug 'jiangmiao/auto-pairs'
      Plug 'Valloric/MatchTagAlways'
      Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
      Plug 'junegunn/fzf.vim'
      "Plug 'ctrlpvim/ctrlp.vim'
      "Plug 'tacahiroy/ctrlp-funky'
      Plug 'dyng/ctrlsf.vim'
      Plug 'terryma/vim-multiple-cursors'
      Plug 'vim-scripts/restore_view.vim'
      Plug 'xolox/vim-misc'
      Plug 'xolox/vim-session'
      "Plug 'tpope/vim-obsession'
      "Plug 'dhruvasagar/vim-prosession'
      Plug 'moll/vim-bbye'
      Plug 'vim-airline/vim-airline'
      Plug 'vim-airline/vim-airline-themes'
      Plug 'edkolev/tmuxline.vim'
      Plug 'powerline/fonts', { 'do': './install.sh' }
      "Plug 'junegunn/vim-emoji'
      Plug 'jistr/vim-nerdtree-tabs'
      Plug 'flazz/vim-colorschemes'
      "Plug 'mbbill/undotree'
      Plug 'nathanaelkane/vim-indent-guides'
      Plug 'mhinz/vim-signify'
      Plug 'tpope/vim-abolish'
      Plug 'osyo-manga/vim-over'
      Plug 'gcmt/wildfire.vim'
      Plug 'mhinz/vim-hugefile'
    endif
  " }

  " Writing {
    if count(g:spf13_bundle_groups, 'writing')
      Plug 'reedes/vim-litecorrect'
      Plug 'reedes/vim-wordy'
      Plug 'kana/vim-textobj-user'
      Plug 'kana/vim-textobj-indent'
      Plug 'beloglazov/vim-textobj-quotes'
      Plug 'Julian/vim-textobj-brace'
      Plug 'Chun-Yang/vim-textobj-chunk'
      Plug 'whatyouhide/vim-textobj-xmlattr'
      Plug 'jceb/vim-textobj-uri'
      "Plug 'lilydjwg/fcitx.vim'
      Plug 'Chiel92/vim-autoformat'
      Plug 'editorconfig/editorconfig-vim'
    endif
  " }

  " General Programming {
    if count(g:spf13_bundle_groups, 'programming')
      " Pick one of the checksyntax, jslint, or syntastic
      Plug 'sheerun/vim-polyglot'
      Plug 'w0rp/ale'
      "Plug 'scrooloose/syntastic'
      Plug 'tpope/vim-fugitive'
      Plug 'mattn/webapi-vim'
      Plug 'mattn/gist-vim'
      Plug 'scrooloose/nerdcommenter'
      Plug 'tpope/vim-commentary'
      Plug 'godlygeek/tabular'
      "Plug 'luochen1990/rainbow'
      if executable('ctags')
        Plug 'szw/vim-tags'
        Plug 'majutsushi/tagbar'
      endif
    endif
  " }

  " Snippets & AutoComplete {
    if count(g:spf13_bundle_groups, 'snipmate')
      Plug 'garbas/vim-snipmate'
      Plug 'honza/vim-snippets'
      " Source support_function.vim to support vim-snippets.
      if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
        source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
      endif
    elseif count(g:spf13_bundle_groups, 'youcompleteme')
      Plug 'Valloric/YouCompleteMe', {'do': 'python install.py --js-completer'}
      Plug 'SirVer/ultisnips'
      Plug 'honza/vim-snippets'
    elseif count(g:spf13_bundle_groups, 'neocomplcache')
      Plug 'Shougo/neocomplcache'
      Plug 'Shougo/neosnippet'
      Plug 'Shougo/neosnippet-snippets'
      Plug 'honza/vim-snippets'
    elseif count(g:spf13_bundle_groups, 'neocomplete')
      Plug 'Shougo/neocomplete.vim.git'
      Plug 'Shougo/neosnippet'
      Plug 'Shougo/neosnippet-snippets'
      Plug 'honza/vim-snippets'
    endif
  " }

  " PHP {
    if count(g:spf13_bundle_groups, 'php')
      Plug 'noahfrederick/vim-laravel'
      Plug 'arnaud-lb/vim-php-namespace'
    endif
  " }

  " Python {
    if count(g:spf13_bundle_groups, 'python')
      " Pick either python-mode or pyflakes & pydoc
      Plug 'python-mode/python-mode'
    endif
  " }

  " Javascript {
    if count(g:spf13_bundle_groups, 'javascript')
      Plug 'pangloss/vim-javascript'
      Plug 'ternjs/tern_for_vim', {'do': 'npm install'}
      Plug 'elzr/vim-json'
      Plug 'isRuslan/vim-es6'
      Plug 'posva/vim-vue'
      "Plug 'mxw/vim-jsx'
      Plug 'maxmellon/vim-jsx-pretty'
      Plug 'groenewege/vim-less'
      Plug 'kchmck/vim-coffee-script'
    endif
  " }

  " Scala {
    if count(g:spf13_bundle_groups, 'scala')
      Plug 'derekwyatt/vim-scala'
      Plug 'derekwyatt/vim-sbt'
      Plug 'xptemplate'
    endif
  " }

  " Haskell {
    if count(g:spf13_bundle_groups, 'haskell')
      Plug 'travitch/hasksyn'
      Plug 'dag/vim2hs'
      Plug 'Twinside/vim-haskellConceal'
      Plug 'Twinside/vim-haskellFold'
      Plug 'lukerandall/haskellmode-vim'
      Plug 'eagletmt/neco-ghc'
      Plug 'eagletmt/ghcmod-vim'
      Plug 'Shougo/vimproc.vim', { 'do': 'make' }
      Plug 'adinapoli/cumino'
      Plug 'bitc/vim-hdevtools'
    endif
  " }

  " HTML {
    if count(g:spf13_bundle_groups, 'html')
      Plug 'othree/html5.vim'
      Plug 'alvan/vim-closetag'
      Plug 'hail2u/vim-css3-syntax'
      Plug 'ap/vim-css-color'
      Plug 'othree/csscomplete.vim'
      Plug 'tpope/vim-haml'
      "Plug 'mattn/emmet-vim'
    endif
  " }

  " Ruby {
    if count(g:spf13_bundle_groups, 'ruby')
      Plug 'tpope/vim-rails'
      let g:rubycomplete_buffer_loading = 1
      "let g:rubycomplete_classes_in_global = 1
      "let g:rubycomplete_rails = 1
    endif
  " }

  " Puppet {
    if count(g:spf13_bundle_groups, 'puppet')
      Plug 'rodjek/vim-puppet'
    endif
  " }

  " Go Lang {
    if count(g:spf13_bundle_groups, 'go')
      "Plug 'Blackrush/vim-gocode'
      Plug 'fatih/vim-go'
    endif
  " }

  " Elixir {
    if count(g:spf13_bundle_groups, 'elixir')
      Plug 'elixir-lang/vim-elixir'
      Plug 'carlosgaldino/elixir-snippets'
      Plug 'mattreduce/vim-mix'
    endif
  " }

  " Misc {
    if count(g:spf13_bundle_groups, 'misc')
      Plug 'rust-lang/rust.vim'
      Plug 'tpope/vim-markdown'
      Plug 'spf13/vim-preview'
      Plug 'quentindecock/vim-cucumber-align-pipes'
      Plug 'saltstack/salt-vim'
    endif
  " }

  endif

  call plug#end()

" }
