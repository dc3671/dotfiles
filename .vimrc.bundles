" Environment {

  " Basics {
    set nocompatible    " Must be first line
    set background=dark   " Assume a dark background
  " }

  " Windows Compatible {
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier.
    if has('win32') || has('win64')
      set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

      " Be nice and check for multi_byte even if the config requires
      " multi_byte support most of the time
      if has("multi_byte")
      " Windows cmd.exe still uses cp850. If Windows ever moved to
      " Powershell as the primary terminal, this would be utf-8
      set termencoding=cp850
      " Let Vim use utf-8 internally, because many scripts require this
      set encoding=utf-8
      setglobal fileencoding=utf-8
      " Windows has traditionally used cp1252, so it's probably wise to
      " fallback into cp1252 instead of eg. iso-8859-15.
      " Newer Windows files might contain utf-8 or utf-16 LE so we might
      " want to try them first.
      set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
      endif
    endif
  " }

" }

" Bundles {

  filetype off
  call plug#begin('~/.vim/bundle')

  " Use before config if available
  if filereadable(expand("~/.vimrc.before"))
    source ~/.vimrc.before
  endif

  " In your .vimrc.before file
  " list only the plugin groups you will use
  if !exists('g:cfg_bundle_preset')
    let g:cfg_bundle_preset = "nano"
  endif

  if !exists('g:cfg_bundle_groups')
    if g:cfg_bundle_preset == "full"
      let g:cfg_bundle_groups = ['general', 'selecting', 'searching', 'youcompleteme', 'frontend']
    elseif g:cfg_bundle_preset == 'cpp'
      let g:cfg_bundle_groups = ['general', 'selecting', 'searching', 'youcompleteme']
    elseif g:cfg_bundle_preset == 'frontend'
      let g:cfg_bundle_groups = ['general', 'selecting', 'searching', 'youcompleteme', 'frontend']
    else
      let g:cfg_bundle_groups = ['general', 'selecting']
    endif
  endif

  " You can use 'K' on plugin to show document
  if count(g:cfg_bundle_groups, 'general')
    " Management {
      "if has('unix') && !has('mac')
        "Plug 'lilydjwg/fcitx.vim'
      "endif
      Plug 'scrooloose/nerdtree'
      Plug 'jistr/vim-nerdtree-tabs'
      Plug 'vim-ctrlspace/vim-ctrlspace'
      Plug 'editorconfig/editorconfig-vim'
      Plug 'majutsushi/tagbar'
      Plug 'moll/vim-bbye'
      " inline git management
      Plug 'tpope/vim-fugitive'
      Plug 'airblade/vim-gitgutter'
      Plug 'zivyangll/git-blame.vim'
      "Plug 'mbbill/undotree'
    " }

    " UI {
      Plug 'spf13/vim-colors'
      "Plug 'joshdick/onedark.vim'
      "Plug 'sainnhe/sonokai'
      "Plug 'NLKNguyen/papercolor-theme'
      "Plug 'Mizux/vim-colorschemes'
      Plug 'sainnhe/edge'
      Plug 'vim-airline/vim-airline'
      Plug 'vim-airline/vim-airline-themes'
      Plug 'edkolev/tmuxline.vim'
      Plug 'powerline/fonts', { 'do': './install.sh' }
      "Plug 'junegunn/vim-emoji'
      Plug 'flazz/vim-colorschemes'
      "Plug 'nathanaelkane/vim-indent-guides'
      Plug 'Yggdroot/indentLine'
      Plug 'godlygeek/tabular'
      "Plug 'luochen1990/rainbow'
      " Show git changes
      "Plug 'mhinz/vim-signify'
    " }

    " Edit {
      Plug 'w0rp/ale'
      "Plug 'Chiel92/vim-autoformat'
      " syntax support for every language
      Plug 'sheerun/vim-polyglot'
      " many useful jump mappings with [ and ]
      Plug 'tpope/vim-unimpaired'
      Plug 'tpope/vim-surround'
      Plug 'tpope/vim-repeat'
      Plug 'rhysd/conflict-marker.vim'
      Plug 'jiangmiao/auto-pairs'
      Plug 'Valloric/MatchTagAlways'
      Plug 'tpope/vim-abolish'
      Plug 'osyo-manga/vim-over'
      Plug 'mhinz/vim-hugefile'
      Plug 'scrooloose/nerdcommenter'
      Plug 'tpope/vim-commentary'
      Plug 'quentindecock/vim-cucumber-align-pipes'
    " }
  endif

  if count(g:cfg_bundle_groups, 'selecting')
    " Selecting {
      Plug 'terryma/vim-multiple-cursors'
      Plug 'gcmt/wildfire.vim'
      Plug 'kana/vim-textobj-user'
      Plug 'kana/vim-textobj-indent'
      Plug 'beloglazov/vim-textobj-quotes'
      Plug 'Julian/vim-textobj-brace'
      Plug 'Chun-Yang/vim-textobj-chunk'
      Plug 'whatyouhide/vim-textobj-xmlattr'
      Plug 'jceb/vim-textobj-uri'
    " }
  endif

  if count(g:cfg_bundle_groups, 'searching')
    " Search {
      Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all --no-update-rc' }
      Plug 'junegunn/fzf.vim'
      "Plug 'ctrlpvim/ctrlp.vim'
      "Plug 'tacahiroy/ctrlp-funky'
      Plug 'dyng/ctrlsf.vim'
    " }
  endif

  if count(g:cfg_bundle_groups, 'youcompleteme')
    if g:cfg_bundle_preset == 'cpp'
      Plug 'ycm-core/YouCompleteMe', {'do': 'python3 install.py --clang-completer --clangd-completer'}
    elseif g:cfg_bundle_preset == 'frontend'
      Plug 'ycm-core/YouCompleteMe', {'do': 'python3 install.py --js-completer'}
    elseif g:cfg_bundle_preset == "full"
      Plug 'ycm-core/YouCompleteMe', {'do': 'python3 install.py --clang-completer --clangd-completer --js-completer'}
    endif
    " Snips {
      Plug 'SirVer/ultisnips'
      Plug 'honza/vim-snippets'
    " }
  endif

  if count(g:cfg_bundle_groups, 'frontend')
    " Javascript {
      Plug 'pangloss/vim-javascript'
      "Plug 'ternjs/tern_for_vim', {'do': 'npm install'}
      Plug 'elzr/vim-json'
      Plug 'isRuslan/vim-es6'
      Plug 'posva/vim-vue'
      Plug 'prettier/vim-prettier'
      "Plug 'mxw/vim-jsx'
      Plug 'leafgarland/typescript-vim'
      "Plug 'maxmellon/vim-jsx-pretty'
      Plug 'peitalin/vim-jsx-typescript'
      Plug 'groenewege/vim-less'
      Plug 'kchmck/vim-coffee-script'
      Plug 'Quramy/tsuquyomi'
      Plug 'Quramy/vim-js-pretty-template'
      Plug 'jason0x43/vim-js-indent'
    " }
    " HTML&CSS {
      Plug 'othree/html5.vim'
      Plug 'alvan/vim-closetag'
      Plug 'hail2u/vim-css3-syntax'
      Plug 'ap/vim-css-color'
      Plug 'othree/csscomplete.vim'
      Plug 'tpope/vim-haml'
      Plug 'mattn/emmet-vim'
    " }
  endif

  call plug#end()
" }
